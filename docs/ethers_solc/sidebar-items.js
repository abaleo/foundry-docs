initSidebarItems({"constant":[["BERLIN_SOLC","Berlin support https://blog.soliditylang.org/2021/06/10/solidity-0.8.5-release-announcement/"],["CONSTANTINOPLE_SOLC","Support for configuring the EVM version https://blog.soliditylang.org/2018/03/08/solidity-0.4.21-release-announcement/"],["ISTANBUL_SOLC","Istanbul support https://blog.soliditylang.org/2019/12/09/solidity-0.5.14-release-announcement/"],["LONDON_SOLC","London support https://blog.soliditylang.org/2021/08/11/solidity-0.8.7-release-announcement/"],["PETERSBURG_SOLC","Petersburg support https://blog.soliditylang.org/2019/03/05/solidity-0.5.5-release-announcement/"],["SOLC","The name of the `solc` binary on the system"]],"mod":[["artifacts","Solc artifact types"],["cache","Support for compiling contracts"],["error",""],["hh","Hardhat support"],["remappings",""],["sourcemap",""],["utils","Utility functions"]],"static":[["RELEASES","A list of upstream Solc releases, used to check which version we should download."]],"struct":[["AllowedLibPaths","Helper struct for serializing `--allow-paths` arguments to Solc"],["CompiledMany","The output of multiple `solc` processes."],["MinimalCombinedArtifacts","An Artifacts implementation that uses a compact representation"],["Project","Represents a project workspace and handles `solc` compiling of all contracts in that workspace."],["ProjectBuilder",""],["ProjectCompileOutput","The outcome of `Project::compile`"],["ProjectPathsConfig","Where to find all files or where to write them"],["Solc","Abstraction over `solc` command line utility"],["SolcConfig","The config to use when compiling the contracts"]],"trait":[["Artifact",""],["ArtifactOutput",""]]});