initSidebarItems({"constant":[["EIP1559_FEE_ESTIMATION_DEFAULT_PRIORITY_FEE","The default max priority fee per gas, used in case the base fee is within a threshold."],["EIP1559_FEE_ESTIMATION_PAST_BLOCKS","The number of blocks from the past for which the fee rewards are fetched for fee estimation."],["EIP1559_FEE_ESTIMATION_PRIORITY_FEE_TRIGGER","The threshold for base fee below which we use the default priority fee, and beyond which we estimate an appropriate value for priority fee."],["EIP1559_FEE_ESTIMATION_REWARD_PERCENTILE","The default percentile of gas premiums that are fetched for fee estimation."],["EIP1559_FEE_ESTIMATION_THRESHOLD_MAX_CHANGE","The threshold max change/difference (in %) at which we will ignore the fee history values under it."],["WEI_IN_ETHER","1 Ether = 1e18 Wei == 0x0de0b6b3a7640000 Wei"]],"enum":[["ConversionError",""],["Units","Common Ethereum unit types."]],"fn":[["eip1559_default_estimator","The default EIP-1559 fee estimator which is based on the work by MyCrypto"],["format_bytes32_string","Returns a bytes32 string representation of text. If the length of text exceeds 32 bytes, an error is returned."],["format_ether","Format the output for the user which prefer to see values in ether (instead of wei)"],["format_units","Divides the provided amount with 10^{units} provided."],["get_contract_address","The address for an Ethereum contract is deterministically computed from the address of its creator (sender) and how many transactions the creator has sent (nonce). The sender and nonce are RLP encoded and then hashed with Keccak-256."],["get_create2_address","Returns the CREATE2 address of a smart contract as specified in EIP1014"],["get_create2_address_from_hash","Returns the CREATE2 address of a smart contract as specified in EIP1014, taking the pre-computed hash of the init code as input."],["hash_message","Hash a message according to EIP-191."],["id","Calculate the function selector as per the contract ABI specification. This is defined as the first 4 bytes of the Keccak256 hash of the function signature."],["keccak256","Compute the Keccak-256 hash of input bytes."],["parse_bytes32_string","Returns the decoded string represented by the bytes32 encoded data."],["parse_ether","Converts the input to a U256 and converts from Ether to Wei."],["parse_units","Multiplies the provided amount with 10^{units} provided."],["secret_key_to_address","Converts a K256 SigningKey to an Ethereum Address"],["serialize","Serialize a type."],["to_checksum","Converts an Ethereum address to the checksum encoding Ref: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md"]],"mod":[["moonbeam","Moonbeam utils Moonbeam utilities"]],"struct":[["Ganache","Builder for launching `ganache-cli`."],["GanacheInstance","A ganache CLI instance. Will close the instance when dropped."],["Geth","Builder for launching `geth`."],["GethInstance","A geth instance. Will close the instance when dropped."]]});