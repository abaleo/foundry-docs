initSidebarItems({"constant":[["DEFAULT_POLL_INTERVAL","The default polling interval for filters and pending transactions"]],"enum":[["FilterKind","Types of filters supported by the JSON-RPC."],["HttpClientError","Error thrown when sending an HTTP request"],["MockError","Errors for the `MockProvider`"],["ProviderError","An error thrown when making a call to the provider"],["Quorum","Determines when the provider reached a quorum"]],"fn":[["interval",""],["maybe","Calls the future if `item` is None, otherwise returns a `futures::ok`"]],"mod":[["ens","Ethereum Name Service support Adapted from https://github.com/hhatto/rust-ens/blob/master/src/lib.rs"]],"struct":[["EscalatingPending","An EscalatingPending is a pending transaction that increases its own gas price over time, by broadcasting successive versions with higher gas prices."],["FilterWatcher","Streams data from an installed filter via `eth_getFilterChanges`"],["Http","A low-level JSON-RPC Client over HTTP."],["MockProvider","Mock transport used in test environments."],["PendingTransaction","A pending transaction is a transaction which has been submitted but is not yet mined. `await`â€™ing on a pending transaction will resolve to a transaction receipt once the transaction has enough `confirmations`. The default number of confirmations is 1, but may be adjusted with the `confirmations` method. If the transaction does not have enough confirmations or is not mined, the future will stay in the pending state."],["Provider","An abstract provider for interacting with the Ethereum JSON RPC API. Must be instantiated with a data transport which implements the `JsonRpcClient` trait (e.g. HTTP, Websockets etc.)"],["QuorumProvider","A provider that bundles multiple providers and only returns a value to the caller once the quorum has been reached."],["SubscriptionStream","Streams data from an installed filter via `eth_subscribe`"],["TransactionStream","Drains a stream of transaction hashes and yields entire `Transaction`."],["WeightedProvider","The configuration of a provider for the `QuorumProvider`"]],"trait":[["FromErr",""],["JsonRpcClient","Trait which must be implemented by data transports to be used with the Ethereum JSON-RPC provider."],["Middleware","A middleware allows customizing requests send and received from an ethereum node."],["PubsubClient","A transport implementation supporting pub sub subscriptions."],["StreamExt","An extension trait for `Stream`s that provides a variety of convenient combinator functions."]],"type":[["EscalationPolicy","A simple gas escalation policy"]]});