initSidebarItems({"fn":[["exec","Runs the provided precompile against the input data."],["new_shared_cache","Create a new shareable state cache."],["vicinity","Given an ethers provider and a block, it proceeds to construct a [`MemoryVicinity`] from the live chain data returned by the provider."]],"mod":[["cache","Smart caching and deduplication of requests when using a forking provider"],["cheatcodes","Hooks over Sputnik EVM execution which allow runtime logging and modification of chain state from Solidity (cheatcodes)."],["helpers",""],["rpc","Simple in-memory cache backend for use with forking providers"],["state",""]],"static":[["PRECOMPILES","Precompiled contracts which should be provided when instantiating the EVM."],["PRECOMPILES_MAP","Map of Address => Precompile contracts"]],"struct":[["Executor","Wrapper around Sputnik Executors which implements the [`Evm`] trait."],["ForkMemoryBackend","Memory backend with ability to fork another chain from an HTTP provider, storing all cache values in a `BTreeMap` in memory."],["SharedBackend","A cloneable backend type that shares access to the backend data with all its clones."]],"trait":[["SputnikExecutor","Abstraction over the StackExecutor used inside of Sputnik, so that we can replace it with one that implements HEVM-style cheatcodes (or other features)."]],"type":[["MemCache","A basic in memory cache (address -> Account)"],["MemoryState",""],["PrecompileFn",""],["SharedCache","A state cache that can be shared across threads"]]});